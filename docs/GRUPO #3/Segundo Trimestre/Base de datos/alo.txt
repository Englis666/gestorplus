CREATE PROCEDURE registrarHojavidaEstudios (
    IN p_idHojaVida INT,
    IN p_idEstudio INT
)
BEGIN
    INSERT INTO hojavida_estudios (idHojaVida, idEstudio)
    VALUES (p_idHojaVida, p_idEstudio);
END //

CREATE PROCEDURE eliminarHojavidaEstudios (
    IN p_idHojaVida INT,
    IN p_idEstudio INT
)
BEGIN
    DELETE FROM hojavida_estudios
    WHERE idHojaVida = p_idHojaVida AND idEstudio = p_idEstudio;
END //

CREATE PROCEDURE consultarHojavidaEstudios()
BEGIN
    SELECT * FROM hojavida_estudios;
END //

CREATE PROCEDURE consultarHojavidaEstudiosPorId (
    IN p_idHojaVida INT,
    IN p_idEstudio INT
)
BEGIN
    SELECT * FROM hojavida_estudios
    WHERE idHojaVida = p_idHojaVida AND idEstudio = p_idEstudio;
END //

CREATE PROCEDURE registrarHojavidaExperiencia (
    IN p_idHojaVida INT,
    IN p_idExperiencia INT
)
BEGIN
    INSERT INTO hojavida_experiencia (idHojaVida, idExperiencia)
    VALUES (p_idHojaVida, p_idExperiencia);
END //

CREATE PROCEDURE eliminarHojavidaExperiencia (
    IN p_idHojaVida INT,
    IN p_idExperiencia INT
)
BEGIN
    DELETE FROM hojavida_experiencia
    WHERE idHojaVida = p_idHojaVida AND idExperiencia = p_idExperiencia;
END //

CREATE PROCEDURE consultarHojavidaExperiencia()
BEGIN
    SELECT * FROM hojavida_experiencia;
END //

CREATE PROCEDURE consultarHojavidaExperienciaPorId (
    IN p_idHojaVida INT,
    IN p_idExperiencia INT
)
BEGIN
    SELECT * FROM hojavida_experiencia
    WHERE idHojaVida = p_idHojaVida AND idExperiencia = p_idExperiencia;
END //

CREATE PROCEDURE registrarHorasExtras (
    IN p_fecha DATE,
    IN p_hora TIME,
    IN p_idJornada INT
)
BEGIN
    INSERT INTO horasextras (fecha, hora, idJornada)
    VALUES (p_fecha, p_hora, p_idJornada);
END //

CREATE PROCEDURE eliminarHorasExtras (
    IN p_idHoraExtra INT
)
BEGIN
    DELETE FROM horasextras
    WHERE idHoraExtra = p_idHoraExtra;
END //

CREATE PROCEDURE consultarHorasExtras()
BEGIN
    SELECT * FROM horasextras;
END //


CREATE PROCEDURE consultarHorasExtrasPorId (
    IN p_idHoraExtra INT
)
BEGIN
    SELECT * FROM horasextras
    WHERE idHoraExtra = p_idHoraExtra;
END //

CREATE PROCEDURE actualizarHorasExtras (
    IN p_idHoraExtra INT,
    IN p_fecha DATE,
    IN p_hora TIME,
    IN p_idJornada INT
)
BEGIN
    UPDATE horasextras
    SET fecha = p_fecha,
        hora = p_hora,
        idJornada = p_idJornada
    WHERE idHoraExtra = p_idHoraExtra;
END //

CREATE PROCEDURE registrarJornada (
    IN p_fecha DATE,
    IN p_horaInicio TIME,
    IN p_horaFin TIME
)
BEGIN
    INSERT INTO jornada (fecha, horaInicio, horaFin)
    VALUES (p_fecha, p_horaInicio, p_horaFin);
END //

CREATE PROCEDURE eliminarJornada (
    IN p_idJornada INT
)
BEGIN
    DELETE FROM jornada
    WHERE idJornada = p_idJornada;
END //

CREATE PROCEDURE consultarJornada()
BEGIN
    SELECT * FROM jornada;
END //

CREATE PROCEDURE consultarJornadaPorId (
    IN p_idJornada INT
)
BEGIN
    SELECT * FROM jornada
    WHERE idJornada = p_idJornada;
END //

CREATE PROCEDURE actualizarJornada (
    IN p_idJornada INT,
    IN p_fecha DATE,
    IN p_horaInicio TIME,
    IN p_horaFin TIME
)
BEGIN
    UPDATE jornada
    SET fecha = p_fecha,
        horaInicio = p_horaInicio,
        horaFin = p_horaFin
    WHERE idJornada = p_idJornada;
END //


CREATE PROCEDURE registrarJornadaHasHorasExtras (
    IN p_idJornada INT,
    IN p_idHoraExtra INT
)
BEGIN
    INSERT INTO jornada_has_horas_extras (idJornada, idHoraExtra)
    VALUES (p_idJornada, p_idHoraExtra);
END //

CREATE PROCEDURE eliminarJornadaHasHorasExtras (
    IN p_idJornada INT,
    IN p_idHoraExtra INT
)
BEGIN
    DELETE FROM jornada_has_horas_extras
    WHERE idJornada = p_idJornada AND idHoraExtra = p_idHoraExtra;
END //

CREATE PROCEDURE consultarJornadaHasHorasExtras()
BEGIN
    SELECT * FROM jornada_has_horas_extras;
END //

CREATE PROCEDURE consultarJornadaHasHorasExtrasPorId (
    IN p_idJornada INT,
    IN p_idHoraExtra INT
)
BEGIN
    SELECT * FROM jornada_has_horas_extras
    WHERE idJornada = p_idJornada AND idHoraExtra = p_idHoraExtra;
END //

CREATE PROCEDURE registrarJornadaHasVacaciones (
    IN p_idJornada INT,
    IN p_idVacacion INT
)
BEGIN
    INSERT INTO jornada_has_vacaciones (idJornada, idVacacion)
    VALUES (p_idJornada, p_idVacacion);
END //

CREATE PROCEDURE eliminarJornadaHasVacaciones (
    IN p_idJornada INT,
    IN p_idVacacion INT
)
BEGIN
    DELETE FROM jornada_has_vacaciones
    WHERE idJornada = p_idJornada AND idVacacion = p_idVacacion;
END //

CREATE PROCEDURE consultarJornadaHasVacaciones()
BEGIN
    SELECT * FROM jornada_has_vacaciones;
END //

CREATE PROCEDURE consultarJornadaHasVacacionesPorId (
    IN p_idJornada INT,
    IN p_idVacacion INT
)
BEGIN
    SELECT * FROM jornada_has_vacaciones
    WHERE idJornada = p_idJornada AND idVacacion = p_idVacacion;
END //

CREATE PROCEDURE registrarPazYSalvo (
    IN p_fecha DATE,
    IN p_idRegistro INT
)
BEGIN
    INSERT INTO pazysalvo (fecha, idRegistro)
    VALUES (p_fecha, p_idRegistro);
END //

CREATE PROCEDURE eliminarPazYSalvo (
    IN p_idPazYSalvo INT
)
BEGIN
    DELETE FROM pazysalvo
    WHERE idPazYSalvo = p_idPazYSalvo;
END //

CREATE PROCEDURE consultarPazYSalvo()
BEGIN
    SELECT * FROM pazysalvo;
END //

CREATE PROCEDURE consultarPazYSalvoPorId (
    IN p_idPazYSalvo INT
)
BEGIN
    SELECT * FROM pazysalvo
    WHERE idPazYSalvo = p_idPazYSalvo;
END //

CREATE PROCEDURE actualizarPazYSalvo (
    IN p_idPazYSalvo INT,
    IN p_fecha DATE,
    IN p_idRegistro INT
)
BEGIN
    UPDATE pazysalvo
    SET fecha = p_fecha,
        idRegistro = p_idRegistro
    WHERE idPazYSalvo = p_idPazYSalvo;
END //

CREATE PROCEDURE registrarPostulaciones (
    IN p_fecha DATE,
    IN p_idVacante INT,
    IN p_idRegistro INT
)
BEGIN
    INSERT INTO postulaciones (fecha, idVacante, idRegistro)
    VALUES (p_fecha, p_idVacante, p_idRegistro);
END //

CREATE PROCEDURE eliminarPostulaciones (
    IN p_idPostulacion INT
)
BEGIN
    DELETE FROM postulaciones
    WHERE idPostulacion = p_idPostulacion;
END //

CREATE PROCEDURE consultarPostulaciones()
BEGIN
    SELECT * FROM postulaciones;
END //

CREATE PROCEDURE consultarPostulacionesPorId (
    IN p_idPostulacion INT
)
BEGIN
    SELECT * FROM postulaciones
    WHERE idPostulacion = p_idPostulacion;
END //

CREATE PROCEDURE actualizarPostulaciones (
    IN p_idPostulacion INT,
    IN p_fecha DATE,
    IN p_idVacante INT,
    IN p_idRegistro INT
)
BEGIN
    UPDATE postulaciones
    SET fecha = p_fecha,
        idVacante = p_idVacante,
        idRegistro = p_idRegistro
    WHERE idPostulacion = p_idPostulacion;
END //

CREATE PROCEDURE registrarPostulacionesHasVacantes (
    IN p_idPostulacion INT,
    IN p_idVacante INT
)
BEGIN
    INSERT INTO postulaciones_has_vacantes (idPostulacion, idVacante)
    VALUES (p_idPostulacion, p_idVacante);
END //

CREATE PROCEDURE eliminarPostulacionesHasVacantes (
    IN p_idPostulacion INT,
    IN p_idVacante INT
)
BEGIN
    DELETE FROM postulaciones_has_vacantes
    WHERE idPostulacion = p_idPostulacion AND idVacante = p_idVacante;
END //

CREATE PROCEDURE consultarPostulacionesHasVacantes()
BEGIN
    SELECT * FROM postulaciones_has_vacantes;
END //

CREATE PROCEDURE consultarPostulacionesHasVacantesPorId (
    IN p_idPostulacion INT,
    IN p_idVacante INT
)
BEGIN
    SELECT * FROM postulaciones_has_vacantes
    WHERE idPostulacion = p_idPostulacion AND idVacante = p_idVacante;
END //

CREATE PROCEDURE registrarQuejasyReclamos (
    IN p_fecha DATE,
    IN p_descripcion VARCHAR(255),
    IN p_idCargo INT
)
BEGIN
    INSERT INTO quejasyreclamos (fecha, descripcion, idCargo)
    VALUES (p_fecha, p_descripcion, p_idCargo);
END //

CREATE PROCEDURE eliminarQuejasyReclamos (
    IN p_idQuejaYReclamo INT
)
BEGIN
    DELETE FROM quejasyreclamos
    WHERE idQuejaYReclamo = p_idQuejaYReclamo;
END //

CREATE PROCEDURE consultarQuejasyReclamos()
BEGIN
    SELECT * FROM quejasyreclamos;
END //

CREATE PROCEDURE consultarQuejasyReclamosPorId (
    IN p_idQuejaYReclamo INT
)
BEGIN
    SELECT * FROM quejasyreclamos
    WHERE idQuejaYReclamo = p_idQuejaYReclamo;
END //

CREATE PROCEDURE actualizarQuejasyReclamos (
    IN p_idQuejaYReclamo INT,
    IN p_fecha DATE,
    IN p_descripcion VARCHAR(255),
    IN p_idCargo INT
)
BEGIN
    UPDATE quejasyreclamos
    SET fecha = p_fecha,
        descripcion = p_descripcion,
        idCargo = p_idCargo
    WHERE idQuejaYReclamo = p_idQuejaYReclamo;
END //

CREATE PROCEDURE registrarRegistro (
    IN p_fecha DATE,
    IN p_idHojaVida INT
)
BEGIN
    INSERT INTO registro (fecha, idHojaVida)
    VALUES (p_fecha, p_idHojaVida);
END //

CREATE PROCEDURE eliminarRegistro (
    IN p_idRegistro INT
)
BEGIN
    DELETE FROM registro
    WHERE idRegistro = p_idRegistro;
END //

CREATE PROCEDURE consultarRegistro()
BEGIN
    SELECT * FROM registro;
END //

CREATE PROCEDURE consultarRegistroPorId (
    IN p_idRegistro INT
)
BEGIN
    SELECT * FROM registro
    WHERE idRegistro = p_idRegistro;
END //

CREATE PROCEDURE actualizarRegistro (
    IN p_idRegistro INT,
    IN p_fecha DATE,
    IN p_idHojaVida INT
)
BEGIN
    UPDATE registro
    SET fecha = p_fecha,
        idHojaVida = p_idHojaVida
    WHERE idRegistro = p_idRegistro;
END //

CREATE PROCEDURE registrarRegistroHasHojaDeVida (
    IN p_idRegistro INT,
    IN p_idHojaVida INT
)
BEGIN
    INSERT INTO registro_has_hojadevida (idRegistro, idHojaVida)
    VALUES (p_idRegistro, p_idHojaVida);
END //

CREATE PROCEDURE eliminarRegistroHasHojaDeVida (
    IN p_idRegistro INT,
    IN p_idHojaVida INT
)
BEGIN
    DELETE FROM registro_has_hojadevida
    WHERE idRegistro = p_idRegistro AND idHojaVida = p_idHojaVida;
END //

CREATE PROCEDURE consultarRegistroHasHojaDeVida()
BEGIN
    SELECT * FROM registro_has_hojadevida;
END //

CREATE PROCEDURE consultarRegistroHasHojaDeVidaPorId (
    IN p_idRegistro INT,
    IN p_idHojaVida INT
)
BEGIN
    SELECT * FROM registro_has_hojadevida
    WHERE idRegistro = p_idRegistro AND idHojaVida = p_idHojaVida;
END //

CREATE PROCEDURE registrarVacaciones (
    IN p_fechaInicio DATE,
    IN p_fechaFin DATE,
    IN p_idJornada INT
)
BEGIN
    INSERT INTO vacaciones (fechaInicio, fechaFin, idJornada)
    VALUES (p_fechaInicio, p_fechaFin, p_idJornada);
END //

CREATE PROCEDURE eliminarVacaciones (
    IN p_idVacacion INT
)
BEGIN
    DELETE FROM vacaciones
    WHERE idVacacion = p_idVacacion;
END //

CREATE PROCEDURE consultarVacaciones()
BEGIN
    SELECT * FROM vacaciones;
END //

CREATE PROCEDURE consultarVacacionesPorId (
    IN p_idVacacion INT
)
BEGIN
    SELECT * FROM vacaciones
    WHERE idVacacion = p_idVacacion;
END //

CREATE PROCEDURE actualizarVacaciones (
    IN p_idVacacion INT,
    IN p_fechaInicio DATE,
    IN p_fechaFin DATE,
    IN p_idJornada INT
)
BEGIN
    UPDATE vacaciones
    SET fechaInicio = p_fechaInicio,
        fechaFin = p_fechaFin,
        idJornada = p_idJornada
    WHERE idVacacion = p_idVacacion;
END //

CREATE PROCEDURE registrarVacante(
    IN p_fecha DATE,
    IN p_descripcion VARCHAR(255),
    IN p_idCargo INT
)
BEGIN
    INSERT INTO vacantes (fecha, descripcion, idCargo)
    VALUES (p_fecha, p_descripcion, p_idCargo);
END //

CREATE PROCEDURE eliminarVacante(
    IN p_idVacante INT
)
BEGIN
    DELETE FROM vacantes WHERE idVacante = p_idVacante;
END //

CREATE PROCEDURE consultarVacantes()
BEGIN
    SELECT * FROM vacantes;
END //

CREATE PROCEDURE consultarVacantePorId(
    IN p_idVacante INT
)
BEGIN
    SELECT * FROM vacantes WHERE idVacante = p_idVacante;
END //

CREATE PROCEDURE actualizarVacante(
    IN p_idVacante INT,
    IN p_fecha DATE,
    IN p_descripcion VARCHAR(255),
    IN p_idCargo INT
)
BEGIN
    UPDATE vacantes
    SET fecha = p_fecha,
        descripcion = p_descripcion,
        idCargo = p_idCargo
    WHERE idVacante = p_idVacante;
END //

CREATE PROCEDURE actualizarHojaVidaExperiencia(
    IN p_idHojaVida INT,
    IN p_idExperiencia INT,
    IN nuevo_idHojaVida INT,
    IN nuevo_idExperiencia INT
)
BEGIN
    UPDATE hojavida_experiencia
    SET idHojaVida = nuevo_idHojaVida, idExperiencia = nuevo_idExperiencia
    WHERE idHojaVida = p_idHojaVida AND idExperiencia = p_idExperiencia;
END //

CREATE PROCEDURE actualizarJornadaHasHorasExtras(
    IN p_idJornada INT,
    IN p_idHoraExtra INT,
    IN nuevo_idJornada INT,
    IN nuevo_idHoraExtra INT
)
BEGIN
    UPDATE jornada_has_horas_extras
    SET idJornada = nuevo_idJornada, idHoraExtra = nuevo_idHoraExtra
    WHERE idJornada = p_idJornada AND idHoraExtra = p_idHoraExtra;
END //

CREATE PROCEDURE actualizarJornadaHasVacaciones(
    IN p_idJornada INT,
    IN p_idVacacion INT,
    IN nuevo_idJornada INT,
    IN nuevo_idVacacion INT
)
BEGIN
    UPDATE jornada_has_vacaciones
    SET idJornada = nuevo_idJornada, idVacacion = nuevo_idVacacion
    WHERE idJornada = p_idJornada AND idVacacion = p_idVacacion;
END //

CREATE PROCEDURE actualizarPostulacionesHasVacantes(
    IN p_idPostulacion INT,
    IN p_idVacante INT,
    IN nuevo_idPostulacion INT,
    IN nuevo_idVacante INT
)
BEGIN
    UPDATE postulaciones_has_vacantes
    SET idPostulacion = nuevo_idPostulacion, idVacante = nuevo_idVacante
    WHERE idPostulacion = p_idPostulacion AND idVacante = p_idVacante;
END //

CREATE PROCEDURE actualizarRegistroHasHojaDeVida(
    IN p_idRegistro INT,
    IN p_idHojaVida INT,
    IN nuevo_idRegistro INT,
    IN nuevo_idHojaVida INT
)
BEGIN
    UPDATE registro_has_hojadevida
    SET idRegistro = nuevo_idRegistro, idHojaVida = nuevo_idHojaVida
    WHERE idRegistro = p_idRegistro AND idHojaVida = p_idHojaVida;
END //



llamados para cada procedimiento 

--hojadevida_estudios
CALL registrarHojaVidaEstudios(1, 2);

CALL eliminarHojaVidaEstudios(1, 2);

CALL consultarHojaVidaEstudios();

CALL consultarHojaVidaEstudiosPorId(1, 2);

--hojadevida_experiencia
CALL registrarHojaVidaExperiencia(1, 2);

CALL eliminarHojaVidaExperiencia(1, 2);

CALL consultarHojaVidaExperiencia();

CALL consultarHojaVidaExperienciaPorId(1, 2);

--horasextras
CALL registrarHorasExtras('2024-08-14', '10:00:00', 1);

CALL eliminarHorasExtras(1);

CALL consultarHorasExtras();

CALL consultarHorasExtrasPorId(1);

CALL actualizarHorasExtras(1, '2024-08-14', '12:00:00', 2);

--jornada
CALL registrarJornada('2024-08-14', '08:00:00', '17:00:00');

CALL eliminarJornada(1);

CALL consultarJornada();

CALL consultarJornadaPorId(1);

CALL actualizarJornada(1, '2024-08-15', '09:00:00', '18:00:00');

--jornada_has_horas_extras
CALL registrarJornadaHasHorasExtras(1, 1);

CALL eliminarJornadaHasHorasExtras(1, 1);

CALL consultarJornadaHasHorasExtras();

CALL consultarJornadaHasHorasExtrasPorId(1, 1);

--jornada_has_vacaciones
CALL registrarJornadaHasVacaciones(1, 1);

CALL eliminarJornadaHasVacaciones(1, 1);

CALL consultarJornadaHasVacaciones();

CALL consultarJornadaHasVacacionesPorId(1, 1);

--pazysalvo
CALL registrarPazYSalvo('2024-08-14', 1);

CALL eliminarPazYSalvo(1);

CALL consultarPazYSalvo();

CALL consultarPazYSalvoPorId(1);

CALL actualizarPazYSalvo(1, '2024-08-15', 2);

--postulaciones
CALL registrarPostulaciones('2024-08-14', 1, 1);

CALL eliminarPostulaciones(1);

CALL consultarPostulaciones();

CALL consultarPostulacionesPorId(1);

CALL actualizarPostulaciones(1, '2024-08-15', 2, 2);

--postulaciones_has_vacantes
CALL registrarPostulacionesHasVacantes(1, 1);

CALL eliminarPostulacionesHasVacantes(1, 1);

CALL consultarPostulacionesHasVacantes();

CALL consultarPostulacionesHasVacantesPorId(1, 1);

--quejasyreclamos
CALL registrarQuejasyReclamos('2024-08-14', 'Descripción de la queja', 1);

CALL eliminarQuejasyReclamos(1);

CALL consultarQuejasyReclamos();

CALL consultarQuejasyReclamosPorId(1);

CALL actualizarQuejasyReclamos(1, '2024-08-15', 'Nueva descripción', 2);

--registro
CALL registrarRegistro('2024-08-14', 1);

CALL eliminarRegistro(1);

CALL consultarRegistro();

CALL consultarRegistroPorId(1);

CALL actualizarRegistro(1, '2024-08-15', 2);

--registro_has_hojadevida
CALL registrarRegistroHasHojaDeVida(1, 1);

CALL eliminarRegistroHasHojaDeVida(1, 1);

CALL consultarRegistroHasHojaDeVida();

CALL consultarRegistroHasHojaDeVidaPorId(1, 1);

--vacaciones
CALL registrarVacaciones('2024-08-14', '2024-08-20', 1);

CALL eliminarVacaciones(1);

CALL consultarVacaciones();

CALL consultarVacacionesPorId(1);

CALL actualizarVacaciones(1, '2024-08-15', '2024-08-25', 2);

--vacantes
CALL registrarVacante('2024-08-14', 'Descripción de la vacante', 1);

CALL eliminarVacante(1);

CALL consultarVacantes();

CALL consultarVacantePorId(1);

CALL actualizarVacante(1, '2024-08-15', 'Nueva descripción de la vacante', 2);

